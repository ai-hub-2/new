var l=Object.defineProperty;var h=(s,r,t)=>r in s?l(s,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[r]=t;var i=(s,r,t)=>h(s,typeof r!="symbol"?r+"":r,t);const w="https://your-backend-api.com/api/v1";class f{constructor(r=w){i(this,"baseURL");this.baseURL=r}async checkHealth(){try{const r=await fetch(`${this.baseURL}/status`);if(!r.ok)throw new Error(`Health check failed: ${r.status}`);return await r.json()}catch(r){throw console.error("Health check failed:",r),r}}async startAnalysis(r){try{const t=new FormData;t.append("file",r.file),t.append("analysis_type",r.analysisType);const e=await fetch(`${this.baseURL}/analyze`,{method:"POST",body:t});if(!e.ok){const o=await e.json();throw new Error(o.detail||`Analysis failed: ${e.status}`)}return await e.json()}catch(t){throw console.error("Analysis start failed:",t),t}}async getAnalysisStatus(r){try{const t=await fetch(`${this.baseURL}/analysis/${r}/status`);if(!t.ok)throw new Error(`Status check failed: ${t.status}`);return await t.json()}catch(t){throw console.error("Status check failed:",t),t}}async getAnalysisResults(r){try{const t=await fetch(`${this.baseURL}/analysis/${r}/results`);if(!t.ok)throw new Error(`Results fetch failed: ${t.status}`);return await t.json()}catch(t){throw console.error("Results fetch failed:",t),t}}async listAnalyses(){try{const r=await fetch(`${this.baseURL}/analysis/list`);if(!r.ok)throw new Error(`List analyses failed: ${r.status}`);return await r.json()}catch(r){throw console.error("List analyses failed:",r),r}}async deleteAnalysis(r){try{const t=await fetch(`${this.baseURL}/analysis/${r}`,{method:"DELETE"});if(!t.ok)throw new Error(`Delete failed: ${t.status}`);return await t.json()}catch(t){throw console.error("Delete analysis failed:",t),t}}async exportCSV(r){try{const t=await fetch(`${this.baseURL}/export/${r}/csv`);if(!t.ok)throw new Error(`CSV export failed: ${t.status}`);return await t.blob()}catch(t){throw console.error("CSV export failed:",t),t}}async exportJSON(r){try{const t=await fetch(`${this.baseURL}/export/${r}/json`);if(!t.ok)throw new Error(`JSON export failed: ${t.status}`);return await t.blob()}catch(t){throw console.error("JSON export failed:",t),t}}async exportReport(r,t="pdf"){try{const e=await fetch(`${this.baseURL}/export/${r}/report?format=${t}`);if(!e.ok)throw new Error(`Report export failed: ${e.status}`);return await e.blob()}catch(e){throw console.error("Report export failed:",e),e}}async exportCharts(r){try{const t=await fetch(`${this.baseURL}/export/${r}/charts`);if(!t.ok)throw new Error(`Charts export failed: ${t.status}`);return await t.blob()}catch(t){throw console.error("Charts export failed:",t),t}}async waitForAnalysis(r,t){return new Promise((e,o)=>{const n=setInterval(async()=>{try{const a=await this.getAnalysisStatus(r);if(t&&t(a),a.status==="completed"){clearInterval(n);const c=await this.getAnalysisResults(r);e(c)}else a.status==="failed"&&(clearInterval(n),o(new Error("Analysis failed")))}catch(a){clearInterval(n),o(a)}},1e3)})}}const y=new f,u=y;export{f as SpermAnalyzerAPI,y as apiClient,u as default,u as devApiClient};
